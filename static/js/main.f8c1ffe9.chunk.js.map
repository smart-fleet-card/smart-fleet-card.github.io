{"version":3,"sources":["service/QuestionService.js","service/RouteService.js","App.js","index.js"],"names":["QuestionService","parseCitySearchRequests","routeAndQuestionInput","split","filter","line","startsWith","map","requestParts","replace","sourceCity","jumps","parseInt","parseDestinationReachableRequests","destinationCity","parseLoopPossibleRequests","findNextSingleNeighborNode","routesGraph","cycle","nodesToRemoveFromCycle","find","node","neighbors","neighbor","includes","length","RouteService","parseRoutes","reduce","routeLine","routeParts","setNode","setEdge","Graph","multigraph","findCities","numberOfJumpsOrLess","shortestPathsToAllCities","alg","dijkstra","Object","entries","entry","route","distance","doesRouteExist","routeToDestination","Infinity","doesLoopExist","city","_ref","_this","this","loops","findCycles","loop","filterNonLoopNodes","concat","apply","toConsumableArray","nextSingleNeighborNode","nodesToRemove","push","App","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleRouteAndQuestionChange","event","setState","routesAndQuestions","target","value","generateAnswers","state","routes","citySearchRequests","destinationReachableRequests","loopPossibleRequests","_this$state","react_default","a","createElement","className","htmlFor","id","name","onChange","placeholder","errorMessage","type","onClick","citySearchRequest","join","destinationReachableRequest","loopPossibleRequest","Component","window","geotab","addin","manageFleetCards","api","initialize","freshApi","callback","console","log","alert","SessionId","focus","freshState","typeName","resultsLimit","result","error","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f8c1ffe9.chunk.js","sourcesContent":["const CITY_SEARCH_REQUEST_START = 'cities from ';\r\nconst CITY_SEARCH_REQUEST_MIDDLE = ' in ';\r\nconst CITY_SEARCH_REQUEST_END = ' jumps';\r\n\r\nconst DESTINATION_REACHABLE_REQUEST_START = 'can I teleport from ';\r\nconst DESTINATION_REACHABLE_REQUEST_MIDDLE = ' to ';\r\n\r\nconst LOOPS_POSSIBLE_REQUEST_IDENTIFYING_TEXT = 'loop possible from ';\r\n\r\nexport default {\r\n    parseCitySearchRequests(routeAndQuestionInput) {\r\n        let lines = routeAndQuestionInput.split(\"\\n\");\r\n        let citySearchRequestLines = lines.filter(line => line.startsWith(CITY_SEARCH_REQUEST_START));\r\n        return citySearchRequestLines.map(line => {\r\n            let requestParts = line.replace(CITY_SEARCH_REQUEST_START, '')\r\n                .replace(CITY_SEARCH_REQUEST_END, '')\r\n                .split(CITY_SEARCH_REQUEST_MIDDLE);\r\n            return {sourceCity: requestParts[0], jumps: parseInt(requestParts[1])};\r\n        });\r\n    },\r\n\r\n    parseDestinationReachableRequests(routeAndQuestionInput) {\r\n        let lines = routeAndQuestionInput.split(\"\\n\");\r\n        let destinationReachableRequestLines = lines.filter(line => line.startsWith(DESTINATION_REACHABLE_REQUEST_START));\r\n        return destinationReachableRequestLines.map(line => {\r\n            let requestParts = line.replace(DESTINATION_REACHABLE_REQUEST_START, '')\r\n                .split(DESTINATION_REACHABLE_REQUEST_MIDDLE);\r\n            return {sourceCity: requestParts[0], destinationCity: requestParts[1]};\r\n        });\r\n    },\r\n\r\n    parseLoopPossibleRequests(routeAndQuestionInput) {\r\n        let lines = routeAndQuestionInput.split(\"\\n\");\r\n        let loopPossibleRequestLines = lines.filter(line => line.startsWith(LOOPS_POSSIBLE_REQUEST_IDENTIFYING_TEXT));\r\n        return loopPossibleRequestLines.map(line => {\r\n            return line.replace(LOOPS_POSSIBLE_REQUEST_IDENTIFYING_TEXT, '');\r\n        });\r\n    }\r\n}","import {Graph, alg} from \"@dagrejs/graphlib/index\";\r\n\r\nfunction findNextSingleNeighborNode(routesGraph, cycle, nodesToRemoveFromCycle) {\r\n    return cycle.find(node => {\r\n        let neighbors = routesGraph.neighbors(node);\r\n        //Remove any neighbors that we already know are going to be removed from this cycle\r\n        neighbors = neighbors.filter(neighbor => !nodesToRemoveFromCycle.includes(neighbor));\r\n        return !nodesToRemoveFromCycle.includes(node) && neighbors.length <= 1;\r\n    });\r\n}\r\n\r\nexport default {\r\n    parseRoutes(routeAndQuestionInput) {\r\n        let lines = routeAndQuestionInput.split(\"\\n\");\r\n        let routeLines = lines.filter(line => line.includes('-'));\r\n        return routeLines.reduce((routesGraph, routeLine) => {\r\n            let routeParts = routeLine.split(' - ');\r\n\r\n            routesGraph.setNode(routeParts[0]);\r\n            routesGraph.setNode(routeParts[1]);\r\n            routesGraph.setEdge(routeParts[0], routeParts[1]);\r\n            routesGraph.setEdge(routeParts[1], routeParts[0]);\r\n\r\n            return routesGraph;\r\n        }, new Graph({multigraph: true}));\r\n    },\r\n\r\n    findCities(routesGraph, sourceCity, numberOfJumpsOrLess) {\r\n        let shortestPathsToAllCities = alg.dijkstra(routesGraph, sourceCity);\r\n        let matchingRoutes = Object.entries(shortestPathsToAllCities).filter(entry => {\r\n            let route = entry[1];\r\n            return route.distance > 0 && route.distance <= numberOfJumpsOrLess;\r\n        });\r\n        return matchingRoutes.map(route => route[0]);\r\n    },\r\n\r\n    doesRouteExist(routesGraph, sourceCity, destinationCity) {\r\n        let shortestPathsToAllCities = alg.dijkstra(routesGraph, sourceCity);\r\n        let routeToDestination = shortestPathsToAllCities[destinationCity];\r\n        return routeToDestination && routeToDestination.distance !== Infinity;\r\n    },\r\n\r\n    doesLoopExist(routesGraph, city) {\r\n        let loops = alg.findCycles(routesGraph);\r\n        //Remove the nodes with routes that double back on themselves\r\n        loops = loops.map(loop => this.filterNonLoopNodes(routesGraph, loop));\r\n        let allNodesInALoop = [].concat(...loops);\r\n        return allNodesInALoop.includes(city);\r\n    },\r\n\r\n    //A non-loop node is a node that has only 1 neighbor, these are included in graph cycles found, but should not be\r\n    // counted as part of the loop.\r\n    filterNonLoopNodes(routesGraph, cycle) {\r\n        let nodesToRemove = [];\r\n        let nextSingleNeighborNode;\r\n        do {\r\n            nextSingleNeighborNode = findNextSingleNeighborNode(routesGraph, cycle, nodesToRemove);\r\n            if (nextSingleNeighborNode) {\r\n                nodesToRemove.push(nextSingleNeighborNode);\r\n            }\r\n        } while(nextSingleNeighborNode);\r\n\r\n        return cycle.filter(node => !nodesToRemove.includes(node));\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport QuestionService from \"./service/QuestionService\";\nimport RouteService from \"./service/RouteService\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            routesAndQuestions: '',\n            routes: {},\n            citySearchRequests: [],\n            destinationReachableRequests: [],\n            loopPossibleRequests: []\n        }\n    }\n\n    handleRouteAndQuestionChange = (event) => {\n        this.setState({routesAndQuestions: event.target.value});\n    };\n\n    generateAnswers = () => {\n        this.setState((state) => ({\n            routes: RouteService.parseRoutes(state.routesAndQuestions),\n            citySearchRequests: QuestionService.parseCitySearchRequests(state.routesAndQuestions),\n            destinationReachableRequests: QuestionService.parseDestinationReachableRequests(state.routesAndQuestions),\n            loopPossibleRequests: QuestionService.parseLoopPossibleRequests(state.routesAndQuestions)\n        }));\n    };\n\n    render() {\n        let {\n            routesAndQuestions,\n            routes,\n            citySearchRequests,\n            destinationReachableRequests,\n            loopPossibleRequests\n        } = this.state;\n        return (\n            <div className=\"tp-app\">\n                <h1>Welcome to Adam's Amazing Teleporter!</h1>\n                <h3>Please enter available routes and your questions in the form below, then hit submit to see your answers.</h3>\n                <form>\n                    <label htmlFor=\"routesAndQuestions\" >Routes and Questions:</label>\n                    <textarea id=\"routesAndQuestions\"\n                              name=\"routesAndQuestions\"\n                              value={routesAndQuestions}\n                              onChange={this.handleRouteAndQuestionChange}\n                              placeholder=\"Enter your routes and questions here\"\n                    />\n                    <div className=\"tp-error\">{this.state.errorMessage}</div>\n                    <button type=\"button\" onClick={this.generateAnswers}>Submit</button>\n                </form>\n                <div id=\"routeQuestionAnswers\">\n                    <h3>Answers:</h3>\n                    {\n                        citySearchRequests.map(citySearchRequest =>\n                            <div>\n                                cities from {citySearchRequest.sourceCity} in {citySearchRequest.jumps} jumps: {RouteService.findCities(routes, citySearchRequest.sourceCity, citySearchRequest.jumps).join(', ')}\n                            </div>\n                        )\n                    }\n                    {\n                        destinationReachableRequests.map(destinationReachableRequest =>\n                            <div>\n                                can I teleport from {destinationReachableRequest.sourceCity} to {destinationReachableRequest.destinationCity}: {RouteService.doesRouteExist(routes, destinationReachableRequest.sourceCity, destinationReachableRequest.destinationCity) ? 'yes' : 'no'}\n                            </div>\n                        )\n                    }\n                    {\n                        loopPossibleRequests.map(loopPossibleRequest =>\n                            <div>\n                                loop possible from {loopPossibleRequest}: {RouteService.doesLoopExist(routes, loopPossibleRequest) ? 'yes' : 'no'}\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nwindow.geotab.addin.manageFleetCards = () => {\n    let api;\n\n    return {\n        initialize(freshApi, state, callback) {\n            api = freshApi;\n\n            console.log(freshApi);\n            console.log(state);\n\n            alert(\"SessionId:  \" + freshApi.SessionId);\n\n            // if ('geolocation' in navigator) {\n            //     navigator.geolocation.getCurrentPosition(position => {\n            //         callback();\n            //     });\n            // } else {\n            //     callback();\n            // }\n            callback();\n        },\n        focus(freshApi, freshState) {\n            api = freshApi;\n\n            console.log(freshApi);\n            console.log(freshState);\n\n            api.call('Get', {\n                typeName: 'Device'\n                , resultsLimit: 1000\n                // , search: {\n                //     fromDate: new Date().toISOString(),\n                //     groups: freshState.getGroupFilter()\n                // }\n            }, result => {\n\n            }, error => {\n                alert(\"Error: \" + error);\n            });\n        }\n    };\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}