{"version":3,"sources":["service/RouteService.js","App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","database","userName","sessionId","api","window","geotab","addin","manageFleetCards","initialize","freshApi","callback","getSession","session","setState","username","focus","freshState","_this$state","react_default","a","createElement","id","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"oRAWA,IC2DeA,cA/DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,SAAU,GACVC,SAAU,GACVC,UAAW,IAEfV,EAAKW,IAAM,GARIX,mFAYf,GAAIY,OAAOC,OAAQ,CACf,IAAIb,EAAQG,KACZS,OAAOC,OAAOC,MAAMC,iBAAmB,WACnC,MAAO,CACHC,WADG,SACQC,EAAUV,EAAOW,GACxBlB,EAAMW,IAAMM,EAEZjB,EAAMW,IAAIQ,WAAW,SAAUC,GAC3BpB,EAAMqB,SAAS,CACXb,SAAUY,EAAQZ,SAClBc,SAAUF,EAAQX,SAClBC,UAAWU,EAAQV,cAI3BQ,KAEJK,MAdG,SAcGN,EAAUO,GACZxB,EAAMW,IAAMM,UAKxBd,KAAKkB,SAAS,CACVb,SAAU,gBACVC,SAAU,gBACVC,UAAW,oDAKd,IAAAe,EAKDtB,KAAKI,MAHLC,EAFCiB,EAEDjB,SACAC,EAHCgB,EAGDhB,SACAC,EAJCe,EAIDf,UAEJ,OACIgB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACJH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,0BACJH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,0BAAyBpB,GAC9BkB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,2BAA0BnB,GAC/BiB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,4BAA2BlB,YA1DlCoB,aCAlBC,IAASC,OAAON,EAAAC,EAAAC,cAACK,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.5cddda2f.chunk.js","sourcesContent":["import {Graph, alg} from \"@dagrejs/graphlib/index\";\r\n\r\nfunction findNextSingleNeighborNode(routesGraph, cycle, nodesToRemoveFromCycle) {\r\n    return cycle.find(node => {\r\n        let neighbors = routesGraph.neighbors(node);\r\n        //Remove any neighbors that we already know are going to be removed from this cycle\r\n        neighbors = neighbors.filter(neighbor => !nodesToRemoveFromCycle.includes(neighbor));\r\n        return !nodesToRemoveFromCycle.includes(node) && neighbors.length <= 1;\r\n    });\r\n}\r\n\r\nexport default {\r\n    parseRoutes(routeAndQuestionInput) {\r\n        let lines = routeAndQuestionInput.split(\"\\n\");\r\n        let routeLines = lines.filter(line => line.includes('-'));\r\n        return routeLines.reduce((routesGraph, routeLine) => {\r\n            let routeParts = routeLine.split(' - ');\r\n\r\n            routesGraph.setNode(routeParts[0]);\r\n            routesGraph.setNode(routeParts[1]);\r\n            routesGraph.setEdge(routeParts[0], routeParts[1]);\r\n            routesGraph.setEdge(routeParts[1], routeParts[0]);\r\n\r\n            return routesGraph;\r\n        }, new Graph({multigraph: true}));\r\n    },\r\n\r\n    findCities(routesGraph, sourceCity, numberOfJumpsOrLess) {\r\n        let shortestPathsToAllCities = alg.dijkstra(routesGraph, sourceCity);\r\n        let matchingRoutes = Object.entries(shortestPathsToAllCities).filter(entry => {\r\n            let route = entry[1];\r\n            return route.distance > 0 && route.distance <= numberOfJumpsOrLess;\r\n        });\r\n        return matchingRoutes.map(route => route[0]);\r\n    },\r\n\r\n    doesRouteExist(routesGraph, sourceCity, destinationCity) {\r\n        let shortestPathsToAllCities = alg.dijkstra(routesGraph, sourceCity);\r\n        let routeToDestination = shortestPathsToAllCities[destinationCity];\r\n        return routeToDestination && routeToDestination.distance !== Infinity;\r\n    },\r\n\r\n    doesLoopExist(routesGraph, city) {\r\n        let loops = alg.findCycles(routesGraph);\r\n        //Remove the nodes with routes that double back on themselves\r\n        loops = loops.map(loop => this.filterNonLoopNodes(routesGraph, loop));\r\n        let allNodesInALoop = [].concat(...loops);\r\n        return allNodesInALoop.includes(city);\r\n    },\r\n\r\n    //A non-loop node is a node that has only 1 neighbor, these are included in graph cycles found, but should not be\r\n    // counted as part of the loop.\r\n    filterNonLoopNodes(routesGraph, cycle) {\r\n        let nodesToRemove = [];\r\n        let nextSingleNeighborNode;\r\n        do {\r\n            nextSingleNeighborNode = findNextSingleNeighborNode(routesGraph, cycle, nodesToRemove);\r\n            if (nextSingleNeighborNode) {\r\n                nodesToRemove.push(nextSingleNeighborNode);\r\n            }\r\n        } while(nextSingleNeighborNode);\r\n\r\n        return cycle.filter(node => !nodesToRemove.includes(node));\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport QuestionService from \"./service/QuestionService\";\nimport RouteService from \"./service/RouteService\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            database: '',\n            userName: '',\n            sessionId: ''\n        };\n        this.api = {};\n    }\n\n    componentDidMount() {\n        if (window.geotab) {\n            let _this = this;\n            window.geotab.addin.manageFleetCards = () => {\n                return {\n                    initialize(freshApi, state, callback) {\n                        _this.api = freshApi;\n\n                        _this.api.getSession(function (session) {\n                            _this.setState({\n                                database: session.database,\n                                username: session.userName,\n                                sessionId: session.sessionId\n                            });\n                        });\n\n                        callback();\n                    },\n                    focus(freshApi, freshState) {\n                        _this.api = freshApi;\n                    }\n                };\n            };\n        } else {\n            this.setState({\n                database: 'mock-database',\n                userName: 'mock-username',\n                sessionId: 'mock-sessionId'\n            });\n        }\n    }\n\n    render() {\n        let {\n            database,\n            userName,\n            sessionId\n        } = this.state;\n        return (\n            <div id=\"sfc-app\">\n                <h1>Smart Fleet Card Management</h1>\n                <h2>Current Authentication</h2>\n                <div id=\"sfc-current-auth-panel\">\n                    <div><label>Database:</label>{database}</div>\n                    <div><label>User Name:</label>{userName}</div>\n                    <div><label>Session ID:</label>{sessionId}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}